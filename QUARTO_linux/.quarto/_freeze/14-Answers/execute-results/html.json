{
  "hash": "5390b9efecde40db07f9cd7fe8e907b5",
  "result": {
    "markdown": "# Exercise 1 {#exercise1_answers .unnumbered}\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](figures/exercise.png){fig-align='center' width=20%}\n:::\n:::\n\n\nEnsure you are in the correct directory before carrying out the below commands\n\n\n::: {.cell}\n\n```{.bash .Rchunk .cell-code}\ncd ~/Linux/\n```\n:::\n\n\n1.  Change the name of the subdirectory 4_exercises_aaaa within your Linux to 4_exercises\n\n\n::: {.cell}\n\n```{.bash .Rchunk .cell-code}\nmv 4_exercises_aaaa 4_exercises\n```\n:::\n\n\n2.  Make a backup of the 4_exercises directory\n\n\n::: {.cell}\n\n```{.bash .Rchunk .cell-code}\ncp -r 4_exercises 4_exercises_backup \n```\n:::\n\n\n3.  List the contents of the 4_exercises directory\n\n\n::: {.cell}\n\n```{.bash .Rchunk .cell-code}\nls 4_exercises\n```\n:::\n\n\n4.  Within the directory 4_exercises\n\n\n::: {.cell}\n\n```{.bash .Rchunk .cell-code}\ncd 4_exercises\n```\n:::\n\n\nPrint the working directory\n\n\n::: {.cell}\n\n```{.bash .Rchunk .cell-code}\npwd\n```\n:::\n\n\nb.  Print out to screen the phrase 'the echo command allows me to print phrases to screen'\n\n\n::: {.cell}\n\n```{.bash .Rchunk .cell-code}\necho “the echo command allows me to print phrases to screen”\n```\n:::\n\n\nc.  Copy the file copy_this_file.txt to the directory to_me\n\n\n::: {.cell}\n\n```{.bash .Rchunk .cell-code}\ncp copy_this_file.txt to_me\n```\n:::\n\n\nd.  Rename the directory to_me to you\n\n\n::: {.cell}\n\n```{.bash .Rchunk .cell-code}\nmv to_me you\n```\n:::\n\n\nf.  Delete the initial copy_this_file.txt file\n\n\n::: {.cell}\n\n```{.bash .Rchunk .cell-code}\nrm copy_this_file.txt\n```\n:::\n\n\n# Exercise 2 {#exercise2_answers .unnumbered}\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](figures/exercise_2.png){fig-align='center' width=20%}\n:::\n:::\n\n\nEnsure you are in the correct directory before carrying out the below commands\n\n\n::: {.cell}\n\n```{.bash .Rchunk .cell-code}\ncd ~/Linux/6_final_exercise\n```\n:::\n\n\n1.  See what files are in the directory\n\n\n::: {.cell}\n\n```{.bash .Rchunk .cell-code}\nls\n```\n:::\n\n\n2.  Rename the file 3-P£\\_CACTTCGA_L001_R1_001.fastq to 3-P3_CACTTCGA_L001_R1_001.fastq\n\n\n::: {.cell}\n\n```{.bash .Rchunk .cell-code}\nmv 3-P£_CACTTCGA_L001_R1_001.fastq \\\n3-P3_CACTTCGA_L001_R1_001.fastq\n```\n:::\n\n\n3.  Make a backup of the files in a directory called backup\n\n\n::: {.cell}\n\n```{.bash .Rchunk .cell-code}\nmkdir backup\ncp 1-P1_ATGCCTGG_L001_R1_001.fastq backup/\ncp 1-P1_ATGCCTGG_L001_R2_001.fastq backup/\ncp 2-P2_AAGGACAC_L001_R1_001.fastq backup/\ncp 2-P2_AAGGACAC_L001_R2_001.fastq backup/\ncp 3-P3_CACTTCGA_L001_R1_001.fastq backup/\ncp 3-P3_CACTTCGA_L001_R2_001.fastq backup/\ncp 4-E1_ATTGGCTC_L001_R1_001.fastq backup/\ncp 4-E1_ATTGGCTC_L001_R2_001.fastq backup/\ncp metadata.txt backup/\n```\n:::\n\n\nThis can be done a lot quicker with the use of wildcard characters (Covered in Advanced Linux section)\n\n\n::: {.cell}\n\n```{.bash .Rchunk .cell-code}\nmkdir backup\ncp *fastq backup\ncp *txt backup\n```\n:::\n\n\n4.  How many reads are in the samples? The below command will give the number of lines in the files, this number can then be divided by 4 (mentally or using a calculator). These values will be the same for the R2 files as they are for the matching R1 file.\n\n\n::: {.cell}\n\n```{.bash .Rchunk .cell-code}\nwc -l 1-P1_ATGCCTGG_L001_R1_001.fastq \\\n2-P2_AAGGACAC_L001_R1_001.fastq \\\n3-P3_CACTTCGA_L001_R1_001.fastq\n```\n:::\n\n\nAn advanced method using regular expressions, wildcard characters and grep\n\n\n::: {.cell}\n\n```{.bash .Rchunk .cell-code}\ngrep -c \"^@[0-9]*_\" *R1*.fastq\n```\n:::\n\n\n5.  Remove the fastq files with no data Check which files have no data\n\n\n::: {.cell}\n\n```{.bash .Rchunk .cell-code}\nwc \\\n1-P1_ATGCCTGG_L001_R1_001.fastq 1-P1_ATGCCTGG_L001_R2_001.fastq \\\n2-P2_AAGGACAC_L001_R1_001.fastq 2-P2_AAGGACAC_L001_R2_001.fastq \\\n3-P3_CACTTCGA_L001_R1_001.fastq 3-P3_CACTTCGA_L001_R2_001.fastq \\\n4-E1_ATTGGCTC_L001_R1_001.fastq 4-E1_ATTGGCTC_L001_R2_001.fastq \n```\n:::\n\n\nRemove empty files\n\n\n::: {.cell}\n\n```{.bash .Rchunk .cell-code}\nrm \\\n4-E1_ATTGGCTC_L001_R1_001.fastq 4-E1_ATTGGCTC_L001_R2_001.fastq\n```\n:::\n\n\n6.  Update the backup files with the previous change\n\n\n::: {.cell}\n\n```{.bash .Rchunk .cell-code}\nrm backup/4-E1_ATTGGCTC_L001_R1_001.fastq \\\nbackup/4-E1_ATTGGCTC_L001_R2_001.fastq \n```\n:::\n\n\n7.  Check if the 1st read names match in the paired files\n\n\n::: {.cell}\n\n```{.bash .Rchunk .cell-code}\nhead -n 1 \\\n1-P1_ATGCCTGG_L001_R1_001.fastq 1-P1_ATGCCTGG_L001_R2_001.fastq \\\n2-P2_AAGGACAC_L001_R1_001.fastq 2-P2_AAGGACAC_L001_R2_001.fastq \\\n3-P3_CACTTCGA_L001_R1_001.fastq 3-P3_CACTTCGA_L001_R2_001.fastq \n```\n:::\n\n\n8.  Check if the last read names match in the paired files\n\n\n::: {.cell}\n\n```{.bash .Rchunk .cell-code}\ntail -n 4 \\\n1-P1_ATGCCTGG_L001_R1_001.fastq 1-P1_ATGCCTGG_L001_R2_001.fastq \\\n2-P2_AAGGACAC_L001_R1_001.fastq 2-P2_AAGGACAC_L001_R2_001.fastq \\\n3-P3_CACTTCGA_L001_R1_001.fastq 3-P3_CACTTCGA_L001_R2_001.fastq \n```\n:::\n\n\n9.  In file 1-P1_ATGCCTGG_L001_R1_001.fastq look for sequence headers with the term 'psychrobacter'\n\n\n::: {.cell}\n\n```{.bash .Rchunk .cell-code}\ngrep “psychrobacter” 1-P1_ATGCCTGG_L001_R1_001.fastq\n```\n:::\n\n\n10. In the sample 1-P1 remove any fastq entries where the term 'psychrobacter' appears in the fastq header. Do this for the R1 and R2 file.\n    -   Using **nano** use \"Ctrl+W\" to search for psychrobacter. Then use \"Ctrl+K\" to cut the lines followed by \"Ctrl+W\" and \"Ctrl+X\" to save and exit.\n    -   Using **vim** with \"/\" to search for psychrobacter, \"dd\" to delete lines and \":wq\" to save the file and exit it.\n11. Print to screen the fastq header, sequence and quality data for the 25th sequence in sample 2-P2 for both the R1 and R2 file. Do this with one command. \\@24_ecoli is grepped as the first sequence is \\@0_ecoli\n\n\n::: {.cell}\n\n```{.bash .Rchunk .cell-code}\ngrep -A 3 \"@24_ecoli\" 2-P2_AAGGACAC_L001_R1_001.fastq\ngrep -A 3 \"@24_ecoli\" 2-P2_AAGGACAC_L001_R2_001.fastq\n```\n:::\n\n\n# Advanced exercise {#exerciseadv_answers .unnumbered}\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](figures/adv_exercise.png){fig-align='center' width=20%}\n:::\n:::\n\n\n1.  Copy the directory \\~/Linux/advanced_practice to \\~/Linux/advanced_practice_exercise\n\n\n::: {.cell}\n\n```{.bash .Rchunk .cell-code}\ncp -r ~/Linux/advanced_practice ~/Linux/advanced_practice_exercise\n```\n:::\n\n\n2.  Move into \\~/Linux/advanced_practice_exercise\n\n\n::: {.cell}\n\n```{.bash .Rchunk .cell-code}\ncd ~/Linux/advanced_practice_exercise\n```\n:::\n\n\n3.  Make a directory called fastq and one called txt\n\n\n::: {.cell}\n\n```{.bash .Rchunk .cell-code}\nmkdir fastq txt\n```\n:::\n\n\n4.  With one command move all the fastq files into the directory fastq\n\n\n::: {.cell}\n\n```{.bash .Rchunk .cell-code}\nmv *.fastq fastq/\n```\n:::\n\n\n5.  With one command move all the txt files, excluding metadata.txt and samples.txt, into the directory txt.\n\n\n::: {.cell}\n\n```{.bash .Rchunk .cell-code}\nmv sample_*txt txt/\n```\n:::\n\n\n6.  Create a file in the fastq directory called patient_1_corrected.fastq and put all the corrected fastq data for patient_1 into the file.\n\n\n::: {.cell}\n\n```{.bash .Rchunk .cell-code}\ncat fastq/sample_[1-2]_*corrected.fastq > \\\nfastq/patient_1_corrected.fastq\n```\n:::\n\n\n7.  Append the metadata line for sample_1_AAAA from metadata.txt to the bottom of the file sample_1_AAA.txt in the txt directory.\n\n\n::: {.cell}\n\n```{.bash .Rchunk .cell-code}\ncat metadata.txt | grep \"sample_1_AAAA\" >> txt/sample_1_AAAA.txt\n```\n:::\n\n\n8.  For all the corrected fastq files find the sequences that start with a stop codon in the forward orientation (i.e. TAG, TAA or TGA). Print out to screen the sample name and sequence info separated by a \":\" only (i.e. sample_10_AAGT:TAAGAGAACAATGAACAGATATTAATAATTTTGCCGCTTTTCTGCGGGAT)\n\n\n::: {.cell}\n\n```{.bash .Rchunk .cell-code}\ngrep \"^TA[AG]\\|^TGA\" fastq/*corrected.fastq | \\\nsed \"s/.*sample/sample/\" | sed \"s/_corrected.fastq//\"\n```\n:::\n\n\n9.  Count the number of Gs and Cs within the sequences of file sample_16_AACC.fastq\n\n\n::: {.cell}\n\n```{.bash .Rchunk .cell-code}\ncat fastq/sample_16_AACC.fastq | grep -B 1 \"^+$\" | \\\ngrep -v \"+\\|--\" | sed \"s/A\\|T//g\" | wc -c\n```\n:::\n\n\n10. Get the fastq headers of sequences with homopolymers made of As with a length of 5 or greater for the uncorrected fastq files for samples 8-13 with one command. Then in the same command make the final output of each line in the format of \"Sample_13: Sequence 12\"\n\n\n::: {.cell}\n\n```{.bash .Rchunk .cell-code}\ncat fastq/*[3-5]*[AGCT].fastq | grep -B 2 \"^+$\" | \\\ngrep -B 1 \"AAAAA\" | grep \"^@\" | sed \"s/^@s/S/\" | \\\nsed \"s/_[AGCT]*_/: Sequence /\" | sed \"s/ 1:$//\"\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}