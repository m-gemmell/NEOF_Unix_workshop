{"title":"Advanced Linux practice","markdown":{"headingText":"Advanced Linux practice","headingAttr":{"id":"advancedlinux","classes":[],"keyvalue":[]},"containsRefs":false,"markdown":"\n```{r, fig.align = 'center',out.width= '20%', echo=FALSE }\nknitr::include_graphics(path = \"figures/linux_intermdiary.png\", auto_pdf = TRUE)\n```\n\nWe have covered a small amount of Linux coding. This should be sufficient to carry out our future workshops but if you were to continue in bioinformatics we would recommend learning more advanced methods.\n\nBelow are some short sections to introduce you to some more advanced linux coding techniques. These give you a quick overview and some examples. This will hopefully put you in a good position to allow you to to learn these techniques in more depth outside of this workshop.\n\nThe following sections will all be run with the files in the directory **\"\\~/Linux/advanced_practice/\"**. Therefore ensure you are in this directory before running the below examples. This contains fastq and txt files for 20 samples. Each sample contains a fastq file and txt file for uncorrected and corrected reads. These fastq files are single end (i.e. there is no reverse/R2 reads).\n\n## Wildcard characters\n\n```{r, fig.align = 'center',out.width= '20%', echo=FALSE }\nknitr::include_graphics(path = \"figures/wildcard.png\", auto_pdf = TRUE)\n```\n\nThese are characters that can be used to represent a variety of other characters. This can be useful for deleting many files, searching for files with specific patterns in their names and more!\n\nBe very careful when using wildcard character with the command **rm**.\n\nThree basic and useful wildcards include:\n\n-   `*` - This represents zero or more characters\\\n-   `?` - This represents a single character\\\n-   `[]` - This represents a range of characters\n\nBelow are various examples you can run to show wildcards in action.\n\nList all the files and directories in the working directory\n\n```{bash eval=FALSE}\nls *\n```\n\nList all files ending in \".fastq\"\n\n```{bash eval=FALSE}\nls *.fastq\n```\n\nList all files ending in \".txt\"\n\n```{bash eval=FALSE}\nls *.txt\n```\n\nList all files with the string \"corrected\" somewhere in the file name\n\n```{bash eval=FALSE}\nls *corrected*\n```\n\nList all files with the string \"corrected\" somewhere in the file name and it ends in \"fastq\"\n\n```{bash eval=FALSE}\nls *corrected*fastq\n```\n\nList all files that begin with \"sample_2\"\n\n```{bash eval=FALSE}\nls sample_2*\n```\n\nList all files that begin with \"sample_2\\_\"\n\n```{bash eval=FALSE}\nls sample_2_*\n```\n\nList the files that begin with \"sample_1\" and ends with \"AAAA.txt\". It may have zero or more characters between these two.\n\n```{bash eval=FALSE}\nls sample_1_*AAAA.txt\n```\n\nList the fastq files of samples with a single digit number\n\n```{bash eval=FALSE}\nls sample_?_*fastq\n```\n\nList the txt files of samples with a number in the tens\n\n```{bash eval=FALSE}\nls sample_1?_*txt\n```\n\nList the txt files for samples 3,4,5,6 & 7 i.e. 3-7\n\n```{bash eval=FALSE}\nls sample_[3-7]_*txt\n```\n\nList the txt files for the non corrected information of samples with single digits.\n\n```{bash eval=FALSE}\nls sample_?_*[ATGC].txt\n```\n\nList the corrected txt files for samples with numbers divisible by 10.\n\n```{bash eval=FALSE}\nls sample_[0-9][0]_*corrected.txt\n```\n\n## Redirection\n\n```{r, fig.align = 'center',out.width= '15%', echo=FALSE }\nknitr::include_graphics(path = \"figures/chevron.png\", auto_pdf = TRUE)\n```\n\nRedirection allows you to put the output of a command to a file. The redirect symbol is `>`. Be careful when redirecting as it will overwrite any existing files. To append to the bottom of a file use `>>`.\n\nBelow are various examples of redirecting in action.\n\nCreate a file called **ecoli.tmp** containing the text \"I am escherichia coli\"\n\n```{bash eval=FALSE}\necho “I am escherichia coli” > ecoli.tmp\n```\n\nCreate a file called **pcryohalolentis.tmp** containing the text \"I am psychrobacter cryohalolentis\"\n\n```{bash eval=FALSE}\necho “I am psychrobacter cryohaloloentis” > pcryohalolentis.tmp\n```\n\nCreate a new file called **bacteria.tmp** which will contain the text from **ecoli.tmp** and **pcryohalolentis.tmp**\n\n```{bash eval=FALSE}\ncat *tmp > bacteria.tmp\n```\n\nCreate a file called **vcholerae.tmp** containing the text \"I am not ecoli or pcryohalolentis\"\n\n```{bash eval=FALSE}\necho “I am not ecoli or pcryohalolentis” > vcholerae.tmp\n```\n\n`cat` the file **vcholerae.tmp** and redirect it to **bacteria.tmp**.\n\n```{bash eval=FALSE}\ncat vcholerae.tmp > bacteria.tmp\n```\n\nLook at the contents of **bacteria.tmp**\n\n```{bash eval=FALSE}\ncat bacteria.tmp\n```\n\nThis has removed the ecoli and pcryohalolentis lines. Append the contents of **ecoli.tmp** and **pcryohalolentis.tmp** to **bacteria.tmp** and then check the file\n\n```{bash eval=FALSE}\ncat ecoli.tmp pcryohalolentis.tmp >> bacteria.tmp\ncat bacteria.tmp\n```\n\nPut information regarding number of lines of all the fastq files into a new file called **fastq_lines.tmp**\n\n```{bash eval=FALSE}\nwc -l *fastq > fastq_lines.tmp\n```\n\nNow delete all the files that were created in the above examples. Again be very careful about using the `rm` command with wildcards.\n\n```{bash eval=FALSE}\nrm *tmp\n```\n\n## Pipes\n\n```{r, fig.align = 'center',out.width= '20%', echo=FALSE }\nknitr::include_graphics(path = \"figures/pipes.png\", auto_pdf = TRUE)\n```\n\nPipes allow you to put the output of one command to the input of another. For example you could use `grep` to get all the lines with a certain string and pipe the output to `wc` to count the number of lines that have the specific string.\n\nThe pipe symbol is `|`. This is normally found on your keyboard directly left of the Z key. Weirdly the symbol is represented by `|` but split in the middle on some keyboards.\n\nA useful tip when building up longer pipes is to start with a smaller amount of data and check the output of each step as you go. To do this you could use `head` instead of `cat` whilst testing.\n\nBelow are various examples of piping in action\n\nPrint to screen the second last fastq entry of the file **sample_20_ATAC_corrected.fastq**\n\n```{bash eval=FALSE}\ncat sample_20_ATAC_corrected.fastq | tail -n 8 | head -n 4 \n```\n\n**Note**: In the above command the `tail` command is working on the output of the `cat` command. Therefore this would not work to get the second last fastq entry of multiple files. For example the following command would print the second last fastq entry of the last fastq file (i.e. **sample_9_AAGA.fastq** due to file ordering)\n\n```{bash eval=FALSE}\ncat *fastq | tail -n 8 | head -n 4\n```\n\nCount the number of lines within all the fastq files\n\n```{bash eval=FALSE}\ncat *fastq | wc -l\n```\n\nCount the number of lines which contain the text \"TAG\" within all the fastq files\n\n```{bash eval=FALSE}\ncat *fastq | grep “TAG” | wc -l\n```\n\n## Regular expressions\n\n```{r, fig.align = 'center',out.width= '20%', echo=FALSE }\nknitr::include_graphics(path = \"figures/trex.png\", auto_pdf = TRUE)\n```\n\nRegular expressions are similar to wildcard characters but more complex and used for commands like `grep` and `sed`.\n\nBelow are a basic set of regular expressions:\n\n-   `.` : A single character\\\n-   `?` : The preceding character matches 1 or 0 times\\\n-   `*` : The preceding character matches zero or more times\\\n-   `+` : The preceding character matches one or more times\\\n-   `{n}` : The preceding character matches exactly n times\\\n-   `{n,m}` : The preceding character matches n to m times\\\n-   `[AT]` : The character is one of the characters in the brackets\\\n-   `[^CG]` : The character is not one of those in the brackets\\\n-   `[1-7]` : The character is 1,2,3,4,5,6 or 7. This works with letters too.\\\n-   `()` : Group several characters into one\\\n-   `|` : Logical OR operator\\\n-   `^` : Matches the beginning of the line\\\n-   `$` : Matches the end of the line\n\nBelow are various examples of regular expressions in action.\n\nLook at the contents of **metadata.txt**\n\n```{bash eval=FALSE}\ncat metadata.txt\n```\n\n!Print out the lines for the Healthy patients\n\n```{bash eval=FALSE}\ncat metadata.txt | grep “HEALTHY”\n```\n\nPrint out the lines for the IBD patients from Craigavon and Belfast. In the below command `\\` is used to allow `|` to be used as an **or** operator instead of acting as a string to match.\n\n```{bash eval=FALSE}\ncat metadata.txt | grep \"IBD\" | grep \"BELFAST\\|CRAIGAVON\"\n```\n\nPrint out the lines for the Pre information of patients not from Edinburgh or Aberdeen\n\n```{bash eval=FALSE}\ncat metadata.txt | grep \"PRE$\" | grep -v \"ABERDEEN\\|EDINBURGH\"\n```\n\nPrint out the lines for patients 1,2,3 and 4\n\n```{bash eval=FALSE}\ncat metadata.txt | grep \"Patient_[1-4][^0-9]\" \n```\n\nPrint to screen every fastq header of file **sample_15_AACG_corrected.fastq**\n\n```{bash eval=FALSE}\ncat sample_15_AACG_corrected.fastq | grep “^@sample”\n```\n\nIn the piping examples we counted the number of lines with the text \"TAG\" within the fastq files. However this also counted fastq headers due to the name of the samples. Let us use a regular expression to only count the number of sequences within the fastq files that contain \"TAG\".\n\n```{bash eval=FALSE}\ncat *fastq | grep “^[^@].*TAG”\n```\n\nPrint to screen every line within the file **sample_3_AAAG_corrected.fastq** that has a possible Threonine codon in the forward direction.\n\n```{bash eval=FALSE}\ngrep \"^[^@].*AC[ACTG]\" sample_3_AAAG_corrected.fastq\n```\n\nIn the above example fastq quality lines are also extracted as some of them also contain the pattern we are searching for. To get around this we can pipe. First grep the fastq quality header (i.e. +), as no other line only contains \"+\", and the line before it. Then we can remove lines with only a plus with an invert grep. Finally we can grep for the threonine pattern using only the sequence lines. Let us build this up step by step.\n\nPrint to screen the fastq quality header plus the one line preceding each (i.e. Sequence line) for file **sample_3_AAAG_corrected.fastq.**\n\n```{bash eval=FALSE}\ngrep -B 1 “^+$” sample_3_AAAG_corrected.fastq\n```\n\nNow pipe this output so it removes the lines with \"+\" (fastq quality headers) and \"--\" (separators of each `grep` match provided by grep because of the -B 1 option).\n\n```{bash eval=FALSE}\ngrep -B 1 \"^+$\" sample_3_AAAG_corrected.fastq | grep -v \"+\\|--\"\n```\n\nNow from this output, `grep` for the Threonine pattern plus colour each match within the line with the option \"**--color**\".\n\n```{bash eval=FALSE}\ngrep -B 1 \"^+$\" sample_3_AAAG_corrected.fastq | grep -v \"+\\|--\" | grep --color \"AC[ACTG]\"\n```\n\nLet us repeat the above but add the possibility of the threonine being in the reverse direction.\n\n```{bash eval=FALSE}\ngrep -B 1 \"^+$\" sample_3_AAAG_corrected.fastq | grep -v \"+\\|--\" \\\n| grep --color \"AC[ACTG]\\|[ACTG]CA\"\n```\n\n**Resources to learn more in the future**\n\nRex Egg, A good resource to learn more about regular expressions:\n\nhttps://www.rexegg.com/\n\nCheatsheet:\n\nhttps://www.rexegg.com/regex-quickstart.html\n\nRegex Crossword, A online game like soduku that is useful to practice regular expressions. Best used in conjunction with the above cheat sheet:\n\nhttps://regexcrossword.com/\n\n## sed\n\n```{r, fig.align = 'center',out.width= '20%', echo=FALSE }\nknitr::include_graphics(path = \"figures/sed.png\", auto_pdf = TRUE)\n```\n\nThis is a complicated yet powerful command that can be used to edit text files quickly and efficiently. The main use is to substitute text with other text. `sed` can be used with regular expressions.\n\nThe basic outline of a `sed` substitute command is as below. In the below case `s/` signifies that `sed` will be used for substitution\n\n```{bash eval=FALSE}\nsed “s/old_text/new_text/” old_file > new_file\n```\n\nBelow are some examples of sed in action.\n\nPrint out a list of all the sample names using the fastq files\n\n```{bash eval=FALSE}\nls -1 *[AGTC].fastq | sed \"s/.fastq//\"\n```\n\nFirst print out the contents of the file **metadata.txt**\n\n```{bash eval=FALSE}\ncat metadata.txt\n```\n\nPrint out **metadata.txt** and change IBD to DISEASE without altering the file\n\n```{bash eval=FALSE}\nsed \"s/IBD/DISEASE/\" metadata.txt\n```\n\nor\n\n```{bash eval=FALSE}\ncat metadata.txt | sed \"s/IBD/DISEASE/\"\n```\n\n`sed` is case sensitive and will by default only replace the first instance it finds within each line. Print **metadata.txt** to screen and then change the \"P\" in \"Patient\" to \"Human_P\"\n\n```{bash eval=FALSE}\ncat metadata.txt | sed \"s/P/Human_P/\"\n```\n\nTo replace every instance of the old pattern within each line `g` can be added after the last `/`. This stands for global therefore it changes the command to a global substitute.\n\nPrint **metadata.txt** to screen and change every occurrence of a number to \"number\". To get the regular expression meaning of \"+\" it needs a \"**`\\`**\" before the \"+\"\n\n```{bash eval=FALSE}\ncat metadata.txt | sed \"s/[0-9]\\+/number/g\"\n```\n\nThe file metadata.txt is tab delimited (i.e. there is a tab between each column. Make a comma separated file containing the information of **metadata.txt** called **metadata.csv** (csv = comma separated value). `\\t` presents a tab.\n\n```{bash eval=FALSE}\ncat metadata.txt | sed \"s/\\t/,/g\" > metadata.csv\n```\n\nFor a very in depth look into the sed command please look at the following link: http://www.grymoire.com/Unix/Sed.html\n\n## Permissions\n\nAll files, directories and programs have permissions. It is important to know about this so you know your read, write and executability permissions for the content within machines.\n\nBelow is a useful link to learn about file permissions:\\\nhttps://www.guru99.com/file-permissions.html\n\n## MCQs: Advanced linux\n\n```{r, fig.align = 'center',out.width= '20%', echo=FALSE }\nknitr::include_graphics(path = \"figures/question_bubble_red.png\", auto_pdf = TRUE)\n```\n\nPlease attempt to answer the below Multiple-Choice Questions to reinforce what you have learnt in this chapter.\n\n```{r, echo = FALSE}\nopts_p <- c(\"__`>`__\", answer=\"__`|`__\", \"__`sed`__\")\n```\n\n1.  Which symbol is used to pipe the output of one command to the input of another? `r longmcq(opts_p)`\n\n```{r, echo = FALSE}\nopts_p <- c(\"__`>`__\", \"__`|`__\", answer=\"__`sed`__\")\n```\n\n2.  What command can be used to substitute text with other text? `r longmcq(opts_p)`\n\n```{r, echo = FALSE}\nopts_p <- c(answer=\"__`>`__\", \"__`|`__\", \"__`sed`__\")\n```\n\n3.  Which symbol is used to redirect the output of a command to a file? `r longmcq(opts_p)`\n\n```{r, echo = FALSE}\nopts_p <- c(\"__`*`__\", \"__`[]`__\", answer=\"__`?`__\")\n```\n\n4.  Which wildcard represents a single character? `r longmcq(opts_p)`\n\n```{r, echo = FALSE}\nopts_p <- c(answer=\"__`*`__\", \"__`[]`__\", \"__`?`__\")\n```\n\n5.  Which wildcard represents zero or more characters? `r longmcq(opts_p)`\n\n```{r, echo = FALSE}\nopts_p <- c(\"__`*`__\", answer=\"__`[]`__\", \"__`?`__\")\n```\n\n6.  Which wildcard represents a range of characters? `r longmcq(opts_p)`\n\n```{r, echo = FALSE}\nopts_p <- c(\"__`.`__\", answer=\"__`?`__\", \"__`*`__\")\n```\n\n7.  Which regular expression indicates that the preceding character matches 1 or 0 times? `r longmcq(opts_p)`\n\n```{r, echo = FALSE}\nopts_p <- c(answer=\"__`.`__\", \"__`?`__\", \"__`*`__\")\n```\n\n8.  Which regular expression represents a single character? `r longmcq(opts_p)`\n\n```{r, echo = FALSE}\nopts_p <- c(\"__`.`__\", \"__`?`__\", answer=\"__`*`__\")\n```\n\n9.  Which regular expression indicates that the preceding character matches zero or more times? `r longmcq(opts_p)`\n\n```{r, echo = FALSE}\nopts_p <- c(\"__`|`__\", \"__`^`__\", answer=\"__`$`__\")\n```\n\n10. Which regular expression matches the end of the line? `r longmcq(opts_p)`\n\n```{r, echo = FALSE}\nopts_p <- c(answer=\"__`|`__\", \"__`^`__\", \"__`$`__\")\n```\n\n11. Which regular expression is a logical OR operator? `r longmcq(opts_p)`\n\n```{r, echo = FALSE}\nopts_p <- c(\"__`|`__\", answer=\"__`^`__\", \"__`$`__\")\n```\n\n12. Which regular expression matches the start of the line? `r longmcq(opts_p)`\n","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"toc-depth":2,"css":["style.css","include/webex.css"],"include-after-body":["include/webex.js"],"output-file":"11-Advanced_linux_practice.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.340","bibliography":["references.bib"],"knitr":{"opts_chunk":{"class.source":"Rchunk"}},"mainfont":"Lexend","monofont":"Fira Mono","editor":"source","toc-expand":3,"toc-location":"left","grid":{"sidebar-width":"300px","body-width":"1000px","margin-width":"0px","gutter-width":"1.5em"},"theme":"cosmo"},"extensions":{"book":{"multiFile":true}}},"pdf":{"identifier":{"display-name":"PDF","target-format":"pdf","base-format":"pdf"},"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"xelatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","output-file":"11-Advanced_linux_practice.pdf"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"block-headings":true,"bibliography":["references.bib"],"knitr":{"opts_chunk":{"class.source":"Rchunk"}},"mainfont":"Lexend","monofont":"Fira Mono","editor":"source","documentclass":"scrreprt"},"extensions":{"book":{"selfContainedOutput":true}}}},"projectFormats":["html","pdf"]}